THIS IS TEST COMMENT

Information storage
	variables
		2 and 3 multiplication (MEMORY)


Information Proessecing
	methods/function/interface
		2 + 2 + 2  = 6 (INSTRUCTION TO THE CPU)
	
procedure oriented programming
	c programming
	main focus on the task 
	
	fly : 
	
object oriented programming
	java programming
	main focus on the system as a whole
	
	Rocket
		has-a : fuel tank, exhaustion chamber, cockpit
		
		does-a :
			fly
				combustion : ignite the fuel
				propel : exhaust all downward angle
			life support
			
BankAccount

money, account number, routing number,deposit,withdraw,address, transfer, branch,
phone, name

(variables) has-a : money=100$,account number=123213213132
,routing=0000011111111,address=123 street ny,branch= New york,
	phone=123123123,name=john

(method) does-a (actions/activity): deposit,withdraw,transfer
	deposit : 10 $
		add 10 $ to the money= 90$
	
public class BankAccount{
	// variables/ has-a/ store information
	int money=100;
	String name="john";
	
	// method/ does-a / action/functionality
	public void deposit(int depositAmount){
		// instruction
		money=money+depositAmount;
		110 = 100 + 10;
	}

}	
	

fan
	blades, button, increase speed, on , off, 
	has-a : blades,button
	does-a : increase speed, on, off
bank 

	( has-a or does-a )
	int money;

	public void deposit
		
	
School
	students, teacher, grade ,classes, teach, learn, exams, takeexams
	has-a : teacher, students, grade, clases
	does-a : teach, learn, 

gmail
	inbox, mail, userid, password,send email, read email, delete email
	has-a
	does-a

products
	

Iphone = 2006 - 5 years
	call
	text
	browse

Iphone2 = 2013 - 7 year
	call - REUSE(inherits)
	text - REUSE(inherits)
	browse - REUSE(inherits)
	camera
	

Iphone3 = 2008
	call - REUSE(inherits)
	text - REUSE(inherits)
	browse - REUSE(inherits)
	camera - REUSE(inherits)
	apple pay


programmer (english)
	src - source code ( human readable format )



machine(french)
	bin - binary code (machine readable format)


JDK = compiler + interpreter
JRE = interpreter

bankaccount{  // opening curly bracket 
	money=100$
	balance

	deposit 10{
		add 10 money=110
	}

	withdraw 5{
		deduct 5 money
	}

}// closing curly bracket

product{
name
price
	buy{
		take paymet
	}
	
	sell{
		receive payment
	}
}

camel case = tall neck,,, shorter body
	uppercase lower case
	
Bank	= "B" upper case.... "ank" lower case

PaypalPayment
ThisIsMyProgramName