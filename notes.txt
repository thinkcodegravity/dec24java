Procedure oriented programming
	focuses on task/procedure/function

	flyRocket
	
Object oriented programming
	focuses on component and functionality of systems
	Modular approach
	Rocket
		has-a : combustion engine, exhaust chamber,
			cockpit
			
	combustion engine		
		does : burn fuel
		
	exhaust chamber
		does : exhaust energy in downward direction

	cockpit
		does : life support 
			
			
Object
	has
	does
	
	
	
	
Rock
	has - iron, nitorgen
	does - throw
	
	
GmailAccount
	has - email, inbox, sentb
	does - 
		send email,delete email, read email
		
		
		
BankAccount
	// composition = bank account made up of
	has - balance, accountNumber,customername,phone ( VARIABLE )
	
	// action/functionality/features
	does - 
		deposit (METHOD)
			balance increases (LOGIC/ALGORITHM) Operators and Control flows
		withdraw(METHOD)
			balance decreases(LOGIC/ALGORITHM)
		
public class BankAccount{
	int balance=100;
	int phone=123;
	public void withdraw(int withdrawAmount){
		balance=balance-withdrawAmount;
	}
	public void deposit(int amount){
		balance=balance+amount;
	}
}




Inheritance : Reusability

	Iphone -- 2006  (10 years R and D)
		call, text, camera, browse
	Iphone3 -- 2007
		call, text, camera, browse, Apple map
	Iphone4 -- 2008
		call, text, camera, browse, Apple map, Apple pay


curly brackets or blocks

Shopping page{
	buy{
		add items to my cart
	}
	checkout{
		use credit card for payment
	}
}
welcome page{
	login{
		enter userid and passwrod
	}
	register{
		enter userid and password and phone
	}
}

www.amazon.com

com.amazon.www.login
	Login.java
	Register.java

com.amazon.www.browsing
	shopping.java
	payment.java


variable cannot have value




Person
	// long term
	name=john // specific to each person (Instance variable)
	species=human // shared by every person (static variable)
	
	// short term
	add 2,5,7 // input/parametric variable
	answer = 7 , 7 // lo			
			= 14
			
			
			
*************** method declaration *****************
program that provides service
	
	what is the name of service/action ?  locateRestaurant
	how many inputs ? what is the data type of each input ?
		1 ,	restaurantName		String
	how many output ? what is the data type of each output ?
		4, String street , String ciity, String state, int zip

	// public, input	= optional
	// output, name = mandatory
	
	public 	output		name(	input )
	
	Input
		0 : leave it blank
		1 : write the data type followed by name of the input
		more : a) write multiple data_type input_name comma separated
			b) create new complex program that can hold all the multiple output
			mention the name of that program
	Output
		0 : void
		1 : data type of output
		more : create new complex program that can hold all the multiple output
			mention the name of that program

	public 	int		add   (int number1,int number2	)
	public 	int		areaOfRectangle( int length   , int breadth  )
	public	boolean	login( String email , String password  )
	public	RestauAddress	locateRestaurant( String restaurantName) 
	
	public int add(int a,int b)
	// blue print
	public class RestauAddress{
		String street;
		String ciity;
		String state;
		int zip;
	}


*************8

shopping.java

companyName = shared (static global)
CartItem = specific (instance global)
productToBuy = input (parameteric)
TotalCost =  (local)
public class shopping{
	static String companyName;
	String cartItem;
	
	public void buy(String productToBuy){
		int TotalCost;
	}
	
}

blocks defines boundary of programs and section in program

Banking {
	withdraw{
		deduct money
	}
	deposit{
		increase money
	}
}



Shopping{
	checkout
	makepayment
	browse
	show product
}

differntiate variable...  value

variable dont have quotes = "john" , 'j' , abcd : abcd
variables dont start with a number = 123 , "123" , a123 : a123 
variables are not address = #abc, "new york" , newyork :  newyork

values start with quotes = 'j' , john, a123 : 'j'
value can be a whole or fraction number = 123, 123a , 12.a , 12.35 :  123 , 12.35
values can be address = (complex data type) "new york", 12345, #abc : #abc


*** RHS = if you see a variable. replace that with its value ***
*** RHS ALWAYS resovles to a single value that matches LHS data type ****


int x=10;
int y=20;
int z=x+30;
	int z=10+30;
	int z=40;
int a=x+y+10;
	int a=10+20+10;
	int a=40
int b=30;
int c=add(x,y);
	int c=add(10,20); // replace all variable with its value
	int c=add(10,20); // give control to add method
	int c=replace whatever add method returned back
	int c=30;
String john="john";
String doe="doe";
String fullName1= john + "joe";
	String fullName1= "john" + "joe";
	String fullName1= "johnjoe";
String fullName1= john + doe;
	String fullName1= "john"+"doe";
	String fullName1= "johndoe";

	


variable = value;

LHS   RHS
10 == 20 (NO.. false)
5 == 5 ( YES... true)

20 == john

true = 120.3

true==true
john==jane
12.2=12.2
'a'='a'


10 greater than 5 ? true
5 is less than 2 ? false
john is less than mike ? 


-( + 5  ) = -5
- ( - 5) = +5


++ = increment operator (increase by 1 )
-- = decrerement operator ( decreases by 1)


cart
	iphone  800$ . 2 orders
	samsung 500$ . 1 orders
	moto 300$ . 2 orders
	
logical / conditional operator
operates on boolean

output is boolean

BOTH
true and true = true
true and false = false
false and true = false
false and false = false

CHOICE
true or true = true
true or false = true
false or true = true
false or false = false

operator precedence(priority)
1) brackets ()
2) * / %
3) + - 
4) > <
5) ||
6) more than 1 operator with same priotity ... process Left to right

int aa=5;
int bb=7;
int cc=6;
int dd=10;

aa+bb*cc+(dd+aa)*bb > cc || aa < bb
5+7*6+(10+5)*7 > 6 || 5 < 7
5+7*6+15*7 > 6 || 5 < 7
5+42+15*7 > 6 || 5 < 7
5+42+105 > 6 || 5 < 7
47+105 > 6 || 5 < 7
152 > 6 || 5 < 7
true || 5 < 7
true || true
true

**************** control flow *************

for : fixed loop
while : 0 or more loop
do-while : 1 or more loop

Shopping : add items to the cart 1 by 1 (WHILE)
ATM : do transaction 1 by 1 (DO-WHILE)
Flight AA123 seat booking : book each seat 1 by 1 (FOR)

For loop
for( initializing ;condition stop; modification){
	Repeating code
}
// infinite loop
for( int i=1 ; i<=3 ; i++){
	sysout("hi");
}

I C R 	= i-1,	true	print hi
M C R	= i-2,	true	print hi
M C R	= i-3,	true	print hi
M C R	= i-4,	false
M C R	


continue : skip all lines in current loop .. and CONTINUE to next loop
break : EXIT..

for( int i=1 ; i<=3 ; i++){
	sysout("hi");
	if(i==2){
		break;
	}
	sysout("bye");
}

I C R 	=	i-1,	true,	print hi	print bye
M C R	=	i-2,	true,	print hi
M C R	=
M C R	=
M C R	


while( boolean condition ){



}


in-built or library program : written by others
	and used by us
	Thread
	collection
	sysout
	scanner
	String
user-defined program : programmer write

int a=10; // a is variable of data type int
Calculator c=new Calculator(); //
	// calculator is a program.. c is reference variable
	// pointing to calculator program
Scanner sc=new Scanner(System.in);	
	// Scanner is a program.. sc is refernce variable
	// pointing to scanner program
Scanner has the code that allows to take input
from screen

MULTIPLE CHOICE - control flow

int choice=123; 
String name="john";
if( choice== 1) {
	System.out.println(" enter withdraw amount");
}
else if( choice== 2) {
	// if you enter one of the block .. you exit this sequence entirely
	System.out.println(" enter deposit amount");
}
else if(name=="john") {
	System.out.println(" your balance is 100$");
}

performance is slower than switch case
switch case operates on primitive and String
	data type
if-else if allows to define complex/multiple conditions
	and match any conditions

if( userid=loginuserid && pwd=loginpwd) {
	System.out.println(" welcome to website");
}
else if( phone=loginphone && pwd=loginpwd) {
	System.out.println(" welcome to website");
}
else if( email=loginemail && pwd=loginpwd) {
	System.out.println(" welcome to website");
}


method call passing input rules
	number of inputs
	type of inputs
	order of inputs

Constructor call has same input rules as above





****************** INHERITANCE ****************** 


Super > Sub class
Parent > Child class


extends
multiple inheritance
multilevel inheritance
overriding
super
constructor behaviour in inheritance






