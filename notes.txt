hardware-
software-
	middleware/firmware
	
Procedure oriented programming : Main focus is on the TASK
	C program

Object Oriretned programming : Main focus is on the system. 
	modular architecutre
	messages oriented architecutre - message pass
	Java, c++, dotnet
	
Car
	drive - POP this focus on drive.
	
Car
	power button
		send signal fuel tank..
	fuel tank
		pour gas in combustion chamber
	combustion chamber
		lit gas... energy is generated
	motor
		use energy , rotate /move engine or motor
	wheel
		moving
	
Login
browse
checkout
track order

BankAccount : deposit, withdraw, name, accountNumber, balance,
	address,phone

	(composition) has-a : name, accountNumber,balance, address,phone
	
	(Actions)does-a : deposit 20$, withdraw

BankAccount has-a/does-a name
BankAccount has-a/does-a deposit

Computer
	store information
	Memory : name=john, accountnumber=123, balance=120$
	
	process information
	CPU 
		deposit 20$ : add this new amount to existing balance


person has/does legs - has... composition
person has/does eat - does... action



BankAccount : deposit, withdraw, name, accountNumber, balance,
	address,phone

	(composition) has-a : name, accountNumber,balance=100$, address,phone
	
	(Actions)does-a : 
		deposit 20$, 
			add 20$ to existing balance - logic
		withdraw 30$
			deduct 30$ to existing balance

public class BankAccount{
	String name="john"; has-a
	int balance=100;has-a
	
	doess-a
	public void deposit(int depositAmount){
		balance=balance+depositAmount; // logic 
	}

	public void withdraw(int withdrawAmount){
		balance=balance-withdrawAmount;
	}
}

public class SavingsBankAccount inherit from BankAccount{
	
	public void interest(){
	}
}
inheritance -acquire freely



Iphone3 - 5 years... 
	call
	text
	browse
	camera
	
Iphone4 - 1 year
	call - inherit
	text - inherit
	browse - inherit
	camera - inherit
	maps

Iphone5 - 1 year
	call
	text
	browse
	camera
	maps
	fingerprintscan


Encapsulation : Internal view "How does the system work"

Abstraction : External view "How do i use the system"

polymorphism : many forms
	2 + 2 = 4
	1.2 + 2.4 = 3.6
	john + jane = johnjane

	communication - text message, phone call, email , IM
	Order - internet, phone, message, in-person
	Payment - credit , debit, crypto, paypal, EMI
	Login - userid/pwd , fingerprint scan, facial recogni, secret code on register phone
	
	
	
polygon - many sides


Stickiness

Iphone - C sharp
Android - J2ME



Laptop
	Windows - java program
	Mac
	Unix


JDK : java development kit
	development + jre
JRE : java runtime environment
	jre
	

Programmer - JDK
Customer - JRE

eclipse
netbeans
intellij
Spring tool suite

helps with programming , compilation and execution

programming - writing the source code
compilation - convert the source code into binary code
execution - use binary code to launch the software

if you create program with name "welcome"
source code : found in src folder, name of file is welcome.java
binary code : found in bin folder, name of file is welcome.class

bank {
	login{
		enter uid pwd
	}
	transfer{
		send money to another acount 
	}
}

amazon {
	browse{
		shop and add to cart
	}
	checkout{
		make payment
	}
}

Bank
	// Variable - vary -something that keeps changing
	has-a : name,number,balance=100$ .. changed from 100 to 120 and 120 to 70
	
	// Method or function or Service
	does-a :
		deposit -20
			// logic / algorithm
			instructions on how to perform deposit. increase balance by 20
		withdraw - 50
			decrease balance by 50

person
	has-a : legs=resting, mouth=closed
	does-a :
		walk
			legs=moving
		talk
			mouth=open
		eat
			mouth=eat
		
		
Variable - Store/hold information
methods - Manipulate/change information


Bank
	has-a (variable): numeric balance=100$ 
	
	does-a (methods){
		deposit =180
	}

declaration
initialization
reassignment



= assignment operator
LHS : Left Hand Side of equal sign
RHS : Right Hand Side of equal sign


LHS ALWAYS VARIABLE
RHS ALWAYS VALUE


int age = 10;
Rules
1) RHS value should match LHS data type
	int age=10; // YES
	int age="john"; // NO
2) LHS can always be variables (NO VALUES)
	10=int age; // NO
	int x=20; // YES
3) RHS can have one of these
	3a can have matching value
	3b can have matching data type variable ( substitue with its value)
	3c can have expression ( solve expression on the right )
	
int x=10;
x=20;
int y=x; // int y=20;
int z=x + 30;	// int z=20 + 30;   int z=50;
sysout x y z	
	
	
	
asd= 10+20;	




Bank
	has-a (variable): numeric balance=100$ 
	
	does-a (method) (service)
	// method declaration
	deposit - (input)accept amount and (output)return latest balance
	{// method body
		new amount is to be added to existing balance
	}
	
	
Methods 
	method declaration - details on what is the input/output of the action
	method body = LOGIC/algorithm

Method declaration
	
	***access  data_output   name(data_input) errors***
	
	access = optional
	data_output   = mandatory (Can be only one)
		if 0 output = void
		if 1 output = data type of the output
		if more output = create a complex data type(program) and mention the name of the program
	name = mandatory name that represents this action
	data_input = optional( can be zero or more )
		if 0 input = leave it blank
		if 1 input = mention the data type and name of the input
		if more input = mention the pair of data type and name with comma separated
	errors = optional
		
	What is the name of the service ?  findRestaurant
	What are the inputs of the service ?
		 1 input... String foodType
	What are the output of the service ?
		Address
	
		payment
		areaOfRectangle
		findRestaurant
	access  data_output   name   (data_input) 					errors
	public  int 	       addition( int number1 ,  int number2   )
	public  float	areaOfCircle  ( float radius)
	public  boolean      loginInfo   (String userid, String password)
	public  boolean      payment   (long ccNumber, short secCode, String expDate)
	public  long	areaOfRectangle(int length , int breadth)
	public  void       donation  (int donationAmount)
	public Address   findRestaurant(String foodType)
	
	public class Address{
		streName
		streNum
		city
		state
		zip
	}
	
	
	
public iphone buyAppleProduct(int amount1000$)
	

equal ==
not equal !=

  10 equal to 10 = yes/true
  john equal john = yes/true
  10 not equal to 11 = yes/true
  15 not equal to 15 = no/false
  10.1 not equal to 10.2 = yes/true 
  
  
greater than >
less than <

10 is greater than 5 : 10 > 5 :  true
10 is less than 6	      : 10 < 6 : false

conditional and
	true AND true = true
	true AND false = false
	false AND true = false
	false AND false= false

conditional or
	true OR true = true
	true OR false = true
	false OR true = true
	false OR false= false






Variable scope :

variable - store information

information
	long term info : permanent memory .... name, age, city, phone
		global variables
			instance variable : name , phone
			class variable : shared information - speices = Human, planet = earth
		
	short term info : breakfast 
			local variable 	:
			parameter(input) variable : 
			
			5 + 6  = input
			11 = 
			
	login
	regUserid="john";
	regPwd="john1!";
	
	loginUserid="john";
	loginPwd="john";
	
regUserid==loginUserid     &&   regPwd==loginPwd
"john"=="john"			&&   "john1!"=="john"
true					&&   false
false

forgot password - verification -requires either email id OR
phone match
||


operator precedence/priority


10+5-2*3 = 39 lefft to right
10+5-2*3 = 11 right to left


1) brackets () 
2) *  /  
3) + - 
4) > <
5) && ||
6) if operators at same level go left to right


10 + 20 * ( 5 - 2) > 20 && 6 + 1 * 2 < 15
10 + 20 * 3 > 20 && 6 + 1 * 2 < 15
10 + 60 > 20 && 6 + 1 * 2 < 15
10 + 60 > 20 && 6 + 2 < 15
70 > 20 && 6 + 2 < 15
70 > 20 && 8 < 15
true  && 8 < 15
true  && true
true

10 * 3 -1 + 3 + 20 * ( 5 - 2) > 20 + 1 * 2 + 3  || 2 < 15
10 * 3 -1 + 3 + 20 * ( 5 - 2) > 20 + 1 * 2 + 3  || true
true



Repetetive logic

LOOP

Fixed loop
0 or more loop
1 or more loop


1 or more loop
ATM software - Loop with transactions

0 or more loop
Browsing Amazon - Loop with browse and add to cart

Fixed loop
AA123 Airline seat booking - Loop with each seat number


Fixed loop - For
0 or more loop - While
1 or more loop - Do while


For ( Initialization ; Condition check ; Modification){
	Repeat code
}
for ( int i=1 	; i <=5		 ; i++){
	sysout( "hi" );
}

I  C R = i:1 , TRUE , print hi
M C R = i:2 , TRUE , print hi
M C R = i:3 , TRUE , print hi
M C R = i:4 , TRUE , print hi
M C R = i:5 , TRUE , print hi
M C R = i:6 , FALSE

INFINITE LOOP
for ( int i=1 	; i < 5		 ; i--){
	sysout( "hi" );
}

I  C R = i:1 , true , print hi
M C R = i:0 , true , print hi
M C R = i:-1 , true, print hi
M C R = i:-2 , true , print hi
M C R = 


continue : skip all remaining lines and go to next loop
break : exit loop

for ( int i=1 	; i < 5		 ; i++){
	sysout( "hi" );
	if(i==3)
		break;
	sysout("bye");
}
I  C R = i:1 , true , print hi print bye
M C R = i:2 , true , print hi print bye
M C R = i:3 , true , print hi 
M C R = 


even number between 1 - 10 

for ( int i=2 	; i <=10		 ; i=i+2){
	sysout( i );
}


while (boolean){

}


int choice=1000;
if( choice == 1) {
	System.out.println("enter the amount to withdraw");
}
else if(choice ==2) {
	System.out.println("enter the amount to deposit");
}
else if(choice ==3) {
	System.out.println("your bank balance is 100$ ");
}
............
else if(choice ==1000) {
	System.out.println("your bank balance is 100$ ");
}
// default
else {
	System.out.println("please enter a choice between 1 and 3");
}
int choice=3;
switch( choice ) {
	case 1: 
		System.out.println("enter the amount to withdraw");
		break;
	case:2
		System.out.println("enter the amount to deposit");
		break;
	case:3
		System.out.println("your bank balance is 100$ ");
		break;
	default : 
		System.out.println("please enter a choice between 1 and 3");
		break;
}
if else if suitable for complex conditions
		if(userid == registered userid && pwd==regPwd)
			sysout welcome
		else if ( phone == registerePhone && pwd==regPwd)
			sysout welcome
		else if ( email = registeredEmail && pwd==regPwd)
			sysout welcome
		else
			login failed


switch case  suitble for simple value conditions
	primitive or string data type value comparison

if - single flow
if else - 2 choice/ either or flow
if , else if , else if , else if , else - multi choice flow ( complex condition checks in multiple choice)
for - fixed loop flow
while - 0 or more loop flow
do-while - 1 or more loop flow
switch case - multi choice flow ( simple primitive/string data type value comparison )


Parent/Super class
Iphone1 - 3 years
	phone
	message
	browse
	
Child/Sub class
Iphone2 - 1 year
		inherit Iphone1 (reuse all features from previous product)
	camera
	map
	

Bank
	balance=100
	
	withdraw(){
		// logic or method body
		change balance... reduce balance
	}
	
	deposit(){
		change balance... increase balance
	}
	
	
interface IIphone
	makeCall();
	sendText();
	browse();
	default maps()
		logic
Class Iphone3 implements IIPhone
	makeCall() { logic }
	sendText(){ logic }
	browse(){ logic }
Class Iphone4 extends Iphone3
	fingerprintScan { logic }
	applePay {logic }
Class Iphone5 extends Iphone4
	camera {}
Class Iphone6 extends Iphone5
	facialRecog {} 
		
Interface - backward compatibility - any changes in interface program can crash all children program
		default method : allows logic in interface program
		default method reintroduced the diamond problem
				
	
IPayment
	collectAddress();
	contactInformation();
	payment();
abstract AbPayment implements IPayment
	collectAddress()
		logic
	contactInformation
		logic
CreditCardPyament extends AbPayment
	payment
		logic
		
Abstract program - GENERALIZATION	/ COMMON
	
	
IPayment
	collectAddress();
	contactInformation();
	payment();
CreditCardPyament implements IPayment
	collectAddress()
		logic
	contactInformation()
		collect phone AND EMAIL logic
	payment
		logic
Paypal implements IPayment
	collectAddress()
		logic
	contactInformation()
		collect phone AND EMAIL logic
	payment
		logic
BitcoinPyament implements IPayment
	collectAddress()
		logic
	contactInformation()
		collect phone AND EMAIL logic
	payment
		logic
---------------- ABSTRACT PROGRAM IMPLEMENTATION BENEFITS ----------------
IPayment
	collectAddress();
	contactInformation();
	payment();
abstract AbPayment implements IPayment
// CODE NOT REPEAATED IN ALL CHILDREN PROGRAM (AVOID REDUNDANT/DUPLIATE CODING)
// ANY CHANGES DONE HERE WILL BE INHERITED BY CHILD (CODE FLEXIBILITY)
	collectAddress()
		logic
	contactInformation()
		collect phone AND EMAIL logic

CreditCardPyament extends AbPayment
	payment
		logic
Paypal implements extends AbPayment
	payment
		logic
BitcoinPyament extends AbPayment
	payment
		logic


IJob
	training();
	marketing();
	placement();
	
AbJob	
	training() logic
	marketing() logic
	
JobW2
	placement() logic

JobC2C
	placement() logic


	
	




compile time polymorphism : OVERLOADING

run time polymorphism : OVERRIDING


MANY FORM
Add = 2 numbers : number = 5 + 2 : 7
	2 names : names    = john + jane : johnjane
	
Login = userid/pwd
	gmail/pwd
	fb/pwd
	phone
	email 
	facial recog
	
public void testDrive(Car c){
	c.drive();
}
public void testDrive(Nissan n){
	n.drive();
}
public void testDrive(Toyota t){
	t.drive();
}
public void testDrive(Ferrari f){
	f.drive();
}



