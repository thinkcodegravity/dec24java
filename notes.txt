Hardware 
	Memory :   Binary language ( 1 , 0 )
Software 
	programs : take binary data from memory and provides Visual aspect



27 = 101010101

hi how are you = 1 0 10 10

picture


video


audio


Digital data/information
	Numbers = 1010
	Text= ascii code 61  
	images = 
	video
	audio
	
Store information ????
	Memory : how does the above information get stored here .... 1010101
	
	
	
ascii characters
A - code/number
B - 


Program : 
	Data
	processing of data

Concepts of prgramming style

	Procedure Oriented Programming : focus on task ( Machine level programming )
	C language
		takeOff/Fly : 

	Object Oriented Programming : focus on system ( User/ customer focused s/w)
	Java , Dotnet , Ruby , C++
		Rocket 
			has 
				cockpit : life support system
					has 
						ventilaton :
						air supply :
						water system :
						
				fuel chamber : ignite the fuel
				exhaustion chamber : exhaute the gas/energy from buring fuel in downward
					direction
			
			does

fan , tv, remote, cell, laptop, amazon, facebook, person , manager, cashier,
restaurant

BankAccount
accountNumber, withdraw, pin , deposit, transfer, customer name, money, login

	// DATA or INFORMATION
	has - a ( BankAccount is MADE-OF or COMPOSED of below attributes)
		accountNumber=0000, pin=1234, customername=john,balance=100
	
	// PROCESS INFORMATION or DATA
	does -a ( BankAccount DOES following activity or PROVIDES following features)
		withdraw ( Logic) 
			25$.... is this customer balance greater than withdraw request
			if yes, then new balance=75...
			else insufficient fund error
		
public class BankAccount{
	int balance=100;
	String customerName="john";
	int pin=1234;
	public void withdraw(int amount){
		if(amount < balance)
			sysout("insufficient fund");
		else
			balance=balance-amount;
	}

}


Person has legs - YES
Person does walk - YES


has : part-of, attribute-of
does : 

10 years - 
	iphone2
		call
		text
1 year		
	iphone3
		call
		text
		browsing
1 year		
	iphone4
		call
		text
		browsing
		map
1 year		
	iphone5
		call
		text
		browsing
		map
		camera
				
		


sticky - closely tied up to underlying device/product/platform


Oracle
	java download
		JDK - Java Development Kit
		JRE - Java Runtime Environment
		
		


Car 
	has
		wheels, engine, steering
		
	does
		left-turn
			Logic..... Use Steering .. turn it left... stering is connected to wheel
			
			
Person
	has
		hand, leg, mouth, nose
		
	does
		breath - use nose
		eat - use hand and mouth
		walk - use legs

Amazon - E-commerce

Paypal - Financial transactions 

1) amazon does not need to know complexity involved in financia tranaction
2) Paypal financial trans alogirthm copyright, private, confidential financial algorithm

******************* Variables ******************
Class members : components that make up your program

Requirement analysis 
BankAccount
	has-a : STORE information ( Variables )
		acctNumber=123  phone=123213 email=j@g.com lastname=asdsad firstname=ewewqeqwe
	
	does-a : MANIPULATE information (Methods)
		withdraw - 20
			money decrease
		deposit -40
			money increases
		update profile
			phone/email/name gets changes
		
		
Varies/Vary : changes
money ???? Variable name ( identifier-meta data ) info about info
120 ??? value (information)

variable name rules  : violation will cause errors
	should be unique in a program
	no spaces
	special characters = $ _ 
	character and numbers 
	should begin with alphabets or special character (not with number)
	Key words cannot be used
Code guidelines
	variable name should be appropriately named to its purpose
	if 2 worded varialbe name use camelcase
		upper case... lower case... camelcase

PERSONAGE
personage
personAge



buyproduct

amazon
	add2Cart=yes
	
	
	
	123123123

program with Variable
1) List the has-a 
2) find the category of each variable
3) pick appropriate java data type



******* requirement analysis *********
BankAccount
	has-a : STORE information ( Variables )
		acctNumber, phone , email ,lastname , firstname , address, balance, accountActive, 
		loggedIn
	does-a : MANIPULATE information (Methods)
		withdraw - 20
			money decrease
		deposit -40
			money increases

*********** design **********		
acctNumber = variable name (identifier)
123  	= value (information)
int = data type


	Simple information / primitive Data type
		numbered data = byte, short, int, long
			acctNumber, phone
		fraction data = float, double
			balance
		single character data - char
			loggedIn
		yes/no data - boolean
			accountActive
	
	Complex information / object Data type
		group of character data = String
			email,lastname=doe,firstname=john
		contain sub-information data = another program
			address = 
				street num, build num, city, state, zip, country
				
				
************ program ********


product 
	has
		name, description, ratings, price, quantity
		
String name="iphone";
float ratings = 4.4;
float price=99.99;
int quantity=10;


Numbered java data type
what range value it can store ?  how much memory will be consumed ?
	byte	
	short
	int
	long



1) LHS should always be a variable
2) RHS can be a literal value 
or another variable of same type
// replace all RHS variable with its latest value
3) RHS can be method call
4) RHS can also be an expression/operator

int a=10;
boolean b=true;
String c="john";
float d=10.1f;

int e="20";
boolean f=false;
String g="jane";
float h=20.1f;

a=e;
sysout( e ) 
b=g;
30.0=h;
b="false"; // LHS is boolean variable and RHS String value



int a="10"; // int a=10;
String b='john'; // String b="john";
boolean c=true; // Correct
int 1x=20; // int x1=20; 
boolean abc1=false; // Correct
String xyz#1="jane"; // String xyz$1="jane";
20=int a; // int a=20;
int x; // declaration
int d=20;
float ab_cd=12.2f; // Correct
double as_qw=12.3; // fraction value are double by default
String e="12"; // Correct
int f=e; // incorrect RHS e (String) = LHS f(int)
int g=d; // correct RHS d(int) = LHS g(int)
h=30; //incorrect .... h has to be declared
boolean d=c; // cannot redeclare a already declared variable
boolean de=c; // COrrect LHS de(boolean)= RHS c(boolean)
d=e; // incorrect lhs d(int)= RHS e (Stirng)
d=35;

variable name
data type
value
declaration
initizlition
reassignment


variable = containers
values = content in the container

data type = value
	refridgerator = cold contents
	glass = liquid contents
	paper bag = solid contents
	
*************** methods ****************

Bank
	has-a (variables)
		(primitive  datatype)simple data, (Object datatype)complex data

	does-a(methods)
		withdraw
	
	
Guidelines how to create a method
	what do i call this activity ? withdraw
	how many and what data type of inputs and what do u call this input?
		1 input  (int amount )
	how many and what data type of output ?
		1 ouput ( String / int )
		
access_privilege output_data_type activity_name ( input)
public String  withdraw(int amount){
	// algorithm, logic
}

METHOD DECLARATION
public output_data_type activity_name ( input){
METHOD BODY/LOGIC/ALGORITHM
}
******RULES for method declaration******
access_privilege output_data_type activity_name ( input)
public		int				add(int a,int b)
	access_privilege : optional
	output_data_type : has to be just 1
		0 output = void 
		1 output = write data type
		more than 1 output= another program that can hold multiple output info
	activity_name : same rules as the variable names
	input : optional... can be 0 or more
		0 input = leave the brackets blank (  )
		1 input = mention the data type and input name ( String name)
		more than 1 input = 
			separated by comma ( int number1  ,  int number2, String name, int a, int b, float x, String city, )
			another program that can hold multiple input info
				loanApplication (CustomerDetails info)
				public class CustomerDetails{
					String name;
					String lastName;
					int creditScore;
					String city;
					String state;
					.......
				}
******** guideline for methods *********
	what do i call this activity ? payment
	how many and what data type of inputs and what do u call this input?
		2 input
		long creditCardNumber, String expDate, short secCode, Address addres, String acctHolderName
	how many and what data type of output ?
		1 ouput
		boolean
		
	customer : loggedIn/Loggedout..
	status : active/inactive
	login page : success/failure
	paymentProcess : success/failed
	
create a method for addition 	
	what do i call this activity ? 
	how many and what data type of inputs and what do u call this input?
	how many and what data type of output ?
		
access_privilege output_data_type activity_name ( input)
1) addition requirement
	public	int 	add( int number1 , int number2  )
2) calculate area of square and circle
	public 	AreaOutput  	measureArea(float radius ,	int side)
3) design login feature	
	public 	boolean		facebookLogin(String userName	,	String password)
	
	
	
	public	int 	add( int number1 , int number2  ){
	
	
	}
	
	public 	boolean		facebookLogin(String userName	,	String password){
	
	
	}
	public 	AreaOutput  	measureArea(float radius ,	int side){
	
	}
	
	
	bank
	withdraw {
		enter withdraw amount
		check balance
		deduct withdra amount from outstanding balance
	}
	deposit{
		enter deposit amount
		add deposit amount to outstanding balance
	}
	balanceinquiry{
		display outstandingbalance
	}
	
	
walmart
		public grocery Shopping(Cash money)
			
		
AppleStore
		public iphone Buy(Cash money)
	
	
class ECommerce

Caller:	checkout{
		CALLING : transfer control to enterPaymentDetails
		order placed.... order cannot be placed..
	}
Callee:	enterPaymentDetails{
		payment processing
		transfer control to transferMoney
	}
	transferMoney{
		paymnt proessed
		transfer control to shipping start
	}
	shippingStart{
		
	}
	
	output : 
		how do i return back to caller
		what do i return back to caller
		when do i return back to caller
		
		
Modular programming
Modules : small manageable program

Nissan and Car
Dog and Milo

Class and Data type
Class is program through which u define data 


************** Variable scope ************

long term info/memory 
short term info/memory



int b=20;
int c=30;
int d=b; // int d=20; replace variable on RHS with its value
p2.name=p22.name;	


RHS processed first... VALUE is generated out of the processing RHS

int a=10+5; // int a=15;
int a=b+c; // int a=20+30; int a=50;
Person p=new Person(); // Person p= #abc ;   #abc: address where person was created in memory
int sum=add(1,2); // int sum=3;

public int add(int a, int b){ // 1 get transferreed to a, 2 value to b
	int s=a+b; // int s=1+2; int s=3;
	return s; // return 3;
}



*************** operators **************

statements : ";"   programming code  that ends with semicolon 
	variable declaration - 
		int a;
	variable assigment - 
		a=20;
	method call/invocation - 
		add(10,20);

blocks : "{}" blocks are used to mark the boundary in a program
	where does the class begin and where it ends
	where does the method begin and where it ends
	where does the algorithm begin and where it ends
	
assignment : "="
	LHS = RHS
	1) LHS and RHS should be same data type
	int a=10; int b=a; int c=10+25;
	2) LHS is always a variable
	3) RHS can be 
		value : int a=10;
		similar variable : int a=b;
		operator/expression : int c=10+20;
		method call : int sum=add(10,25);


Arithmetic operators : primarily is used on numeric data types
	true * false = ???
	10 + 20 = 30
	20 - 5 = 15
	20 * 5 = 100
	20 / 5 = 4
	22 % 5 = 2 remainder(modulous)
	
	Input is numeric data type
	Output is numeric data type

Equality operator : ==
	is 10 equal to 5 = NO false
	is 3 equal to 3 = YES true 
	is 4 not equal to 5 = YES true

	Input can be anything (recommend use it on primitive data type only)
	Output is boolean


Relational operator : < > 
	less than .... greater than
	"john" is less than "jane"
	"jane "is greater than "john"

	10 is greater than 5 = true
	7 is less than 10 = true
	6 is greater than 9 = false
	
	
	Input : numeric data type
	Ouput : boolean 
	
Unary operator : used on numeric data type
	output is numeric
 	
	+ = turn signs of numeric value to positive
	- = turn signs of numeric value to negative
	
	-(- 5 ) = +5
	-(+ ( - 5) = +5
	-   - = +
	-  + = -
	+ -  = -
	+  + = +
	
	++ = increment operator 
		increases a numeric value by 1
	-- = decremenet operator
		decrease a numeric value by 1
	
	int h=10;
	h++; // h =11
	h++; // h = 12
	h--;// h= 11
	h--;// h=10
	h--;// h=9
	sysout(h);
	
	post-increment : after the current line incre/decre
	pre-increment : before the current line incre/ decre
	
	int i=10;
	sysout( i ) ; // prints 10
	// i = 9
	sysout( --i ); // prints 9
	sysout( i--) ; // prints 9
	// i = 8
	// i = 7
	sysout( --i ); // prints 7
	
	
	int j=10;
	sysout( j ); // print 10
	// j=11
	sysout( ++j ); // print 11
	// j=12
	sysout( ++j ); // print 12
	sysout( j++ ); // print 12
	// j =13
	
	
	iphone 1000$ 2 quantity  = 2000
	samsung 800$ 1 quantity = 800
	moto 500$ 4 quantity = 2000
	
	4800
	
	
Conditional operators : AND / OR

and = &&
or = ||

Login webpage : login userid = reg userid AND login pass = reg pass
	true and true = true
	true and false = false
	false and true  = false
	false and false = false
	
int a=10;
int b=30;

a==b &&  a<b	
false && true
false


Login by face recognition or fingerprint scan	
	true or true =  true 
	true or false =  true
	false or true  =  true
	false or false =  false

	
int a=10;
int b=30;
boolean c=true;
a==b ||  a<b	
false || true
true


	input is boolean : 
		boolean value 
		boolean variable 
		boolean output operator
	output is boolean

true || a>b
boolean value OR   boolean output operator
a<b || c
boolean output operator OR boolean variable



operator precedence

1) () []
2) * / %
3) + - 
4) > <
5) && 
6) ||
7) if you have 2 operators at same level then proceed Left to right


( 10+ 5 ) < 5*2 || (20 +4) + 4 * 3 < 21  
15 < 5*2 || (20 +4) + 4 * 3 < 21  
15 < 5*2 || 24 + 4 * 3 < 21  
15 < 10 || 24 + 4 * 3 < 21  
15 < 10 || 24 + 12 < 21  
15 < 10 || 36 < 21  
15 < 10 || 36 < 21  
false || 36 < 21  
false || false
false







( 10+2 ) > 5 && (20 -4) + 4 * 3 > 21
12 > 5 && (20 -4) + 4 * 3 > 21
12 > 5 && 16 + 4 * 3 > 21
12 > 5 && 16 + 12 > 21
12 > 5 && 28 > 21
true && 28 > 21
true && true
true



****************** control flow ************
boolean a=true;
int b=20;
int c=30;

if( false ){


}

condition = 
	boolean variable
	expression or operator that provide boolean output
	boolean value


== : boolean
&& : boolean
> : boolean


+ : int
- : int
++ : int
/ : int


Loop - 
	Shopping - 0 or X loop (WHILE)
	pizza topping - Fixed loop (FOR)
	Atm - 1 or X loop (DO-WHILE)
	
for( Initialization, Condition , Modification){ // for block

	Execute repetetive code here

}
for(int i=1; i <= 3 ; i++ ){
	sysout("hi");
}
I C E	= 	i-1,	true,	Print hi
M C E = 	i-2,	true,	Print hi
M C E = 	i-3,	true,	Print hi
M C E = 	i-4,	false
M C E
M C E


for(int i=1; i > 3 ; i++ ){
	sysout("hi");
}
I C E	= 	i-1, false
M C E = 	
M C E = 	

for(int i=2; i <= 10 ; i=i+2 ){
	System.out.println( i );
}
I C E	= 	i-2, true,	print 2
M C E = 	i-4, true,	print 4
M C E = 	i-6, true,	print 6
M C E = 	
M C E = 	
M C E = 	

i=i+2
i=4+2



continue : MOVE ON TO NEXT LOOP
	skip all remaining line in current loop
break  : EXIT LOOP

for(int i=1; i <= 3 ; i++ ){
	System.out.println( "hi");
	if(i==2)
		continue;
	System.out.println( "bye");
}
I C E	= 	i-1,	true,	print hi	print bye
M C E = 	i-2,	true,	print hi	
M C E = 	i-3,   true,	print hi	print bye
M C E = 	i-4,	false


for(int i=1; i <= 3 ; i++ ){
	System.out.println( "hi");
	if(i==2)
		break;
	System.out.println( "bye");
}

asdadasd

I C E	= 	i-1,	true,	print hi	print bye
M C E = 	i-2,	true,	print hi
M C E = 	
M C E = 	

When/why/how to use continue

for(int i=1;i < 100; i ++){
	browse
	customer chose product in shopping cart
	if(i > 1)
		continue;
	ask customer to enter phone
	ask customer to enter email
}

I C E	= 	i=1	true, browse, add item, ask phone , ask email
M C E = 	i=2 	true, browse, add item
M C E = 	i=3, 	true, browse, add item
M C E = 	i=4, 	true, browse, add item



While( condition ){
	// Execute repetetive code here
}

C E
C E
C E

INFINITE LOOP
int i=1;
while(i < 3) {
	if(i==2)
		continue;
	sysout("hi");
	i++;
}
i=1
C E = 	i-1, true,	print hi , i-2
C E = 	      	
C E = 	

while and do while to end
	incremenet should be inside the loop
	Never have continue before the incremeent



while - 0 or more loops
do-while - 1 or more loops

int i=5;
while(i < 3) {
	print hi
}

int i=5;
do{
	print hi
}while(i < 3) ;


int i=500;

if(i==1 || i>3 || i<4)
	sysout("its 1");
else if(i==2)
	sysout("its 2");
else if(i==3)
	sysout("its 3");
else if(i==4)
	sysout("its 4");
...
else if(i==499)
	sysout("its 499");
else if(i==500)
	sysout("its 500");

else
	sysout("unknown");


Switch case :
	use when dealing with primitive data type values
		or string values

if-else if :
	when dealing with multiple conditions or complex comparison


email and password
userrid and password
phone and password
phone secret code

if(email==regemail && pwd=regPwd)

else if(userod==regUid&& pwd=regPwd)

else if(phone==regPhone && pwd=regPwd)



ATM
	press choice 1 for withdraw
	press choice 2 for deposit
	press choice 3 for balance inquiry

	int choice=???
	
	switch(choice){
		case 1:
				print enter amount to withdraw
		case 2:
				print enter amount to deposit
		case 3:
				print your balance is 100$
		
	}
	
	


if - single comparison
if else if - multiple choice (complex comparison/condition check)
for - fixed loop
while - 0 or more loop
do-while - 1 or more loop
switch case - multiple choice (simple/primitve value comparisson)


Development/programming
Save program - compiler will convert your text into binary file

post binary file is created

Run the program


Compiler error - error in editor
Runtime error - error in console

Reusability
class Iphone{
	call
	text
}
class Iphone5 extends Iphone{
	camera
	appleMap
}
class IphoneX extends Iphone5{
	fingerprintscan
}
class Iphone12 extends Iphone5{
	facialrecog
}
class Iphone14{
	foldableScreen
}



super = keyword to refer parent program


super();  reference to parent constructor
super.x  reference to parent variable x
super.test(); reference to parent method test


this and super = non-static


Interface = allows to implement oop fundamental "Abstraction"


bank
	// has-a ... data section.. variable stores data
	balance=100; 
	
	// does-a ... activity / data modification section.... method manipulate data
	withdraw(){
		balance = balance - withAmount
	}
	
	
	deposit(){
	
	}


2 programs in java connected by below relationship
HAS-A
IS-A


HAS-A = referencce / pointer to other program
IS-A = inheritance connection to other program (extends, implements)


Car, Engine, Wheel, Nissan, Steering, Pizza


Car has-a Engine
Car has-a wheel
Car has-a Steering

Nissan is-a Car

Pizza


public class Car{
	Engine en=new Engine();
	Wheel w=new Wheel();
	Steering s=new Steering();
}

public class Nissan extends Car{


}



Payment, gmail login, fingerprintscan, facialrecog, paypal, creditcard, exp code,login,
shopping, add2cart, checkout

gmail login is-a login
fingerprintscan is-a login
facialRecog is-a login


public class login{

}
public class fingerprintscan extends login{

}
public class facialrecog extends login{

}
public class gmaillogin extends login{

}



paypal is-a payment
creditcard is-a payment
creditcard has-a expcode

public class payment{
}
public class paypal extends payment{

}
public class creditcard extends payment{
	int expcode=123;
}

IFood ic=new IFood()// cannot digitally create something that is incomplete
IFood if=new Nissan();// Nissan does not have the code for IFood
IFood if=new Pizza();// OKK


ICar ic=new ICar()// cannot digitally create something that is incomplete
ICar ic=new Pizza();// Pizza does not have the code for ICar
ICar ic=new Nissan();// OKK





interface IIphone -2005
	call();
	text();
	
	default browseInternet(){
	
	}
	
class Iphone3 implements IIphone - 2006  
	call(){
	}
	text(){
	}
	
class Iphone5 extends Iphone3 - 2010 
	camera(){
	}
	map(){
	}

class IphoneX extends Iphone5 - 2018  
	applePay(){
	}
	faciallrecog(){
	}	
	
Backward compatibility
	java 1.8 = default methods
	
	
	
interface = 100% abstract incomplete

abstract class = partially complete program (  incomplete method and complete methods)

class = 100% concrete complete





Abstract = Generalization - common be

ITesla
	drive();
	mileage();
	digitalScreen();
	
Telsa3 implements ITesla

TelsaS implements ITesla

TelsaX implements ITesla

TelsaY implements ITesla


Nissan Altima SE - 20 k
	Basic package
Nissan Altima LE - 22 k
	leather seats
Nissan Altima Limited edition - 25 k
	praking assis
	rearview camera
	
90% of car component car
10% of car varies

Nissan Altima SE Giant manufacturing unit - 1 billion $
Nissan Altima LE Giant manufacturing unit - 1 billion $
Nissan Altima Limited Edition Giant manufacturing unit - 1 billion $

Nissan Altima Giant manufacturing unit - 1 billion $
	90% of car component assembly

Nissan Altima LE small manufacturing unit - 10 million $
	10% of car compoent

Nissan Altima SE small manufacturing unit - 10 million $
	10% of car compoent

Nissan Altima Limtied Edition small manufacturing unit - 10 million $
	10% of car compoent


Iphone14
	699 - 64 GB memory
	799 - 128 GB memory
	899 -  256 GB memory

AbstractIphone14 (abstract = incomplete)
IIphone = 3 incomplete features/methods
	call
	text
	storage
AbstractIPhone implements IIphone
	call{
	}
	text{
	}
Iphone699 extends AbstractIphone
	storage{
		64 gb memory
	}
Iphone799 extends AbstractIphone
	storage{
		128 gb memory
	}
Iphone899 extends AbstractIphone
	storage{
		256 gb memory
	}	
	
	
	
	
	remove duplicates, code flexible, enhancement

Ipaymnt
	collectShippingAddress();
	collectEmail();
	pyament();
	
Creditcard implement IPayment
	collectShippingAddress(){
		accept street city state ZIP details
	}
	collectEmil(){
		get email id
	}
	pyament(){
		credt card proces
	}
	
Paypal implement IPayment
	collectShippingAddress(){
		accept street city state ZIP details
	}
	collectEmil(){
		get email id
	}
	pyament(){
		paypal account login
	}
	
crypto implement IPayment
	collectShippingAddress(){
		accept street city state ZIP details
	}
	collectEmil(){
		get email id
	}
	pyament(){
		crypto wallet proces
	}

remove duplicates, code flexible, enhancement

Ipaymnt
	collectShippingAddress();
	pyament();
	collectEmail();
	
AbstractPayment implement IPayment
	collectShippingAddress(){
		accept street city state ZIP details
	}
	collectEmail(){
		collect email from customer
	}
	
Creditcard extends AbstractPayment
	pyament(){
		credt card proces
	}
	
Paypal extends AbstractPayment
	pyament(){
		paypal account login
	}
	
crypto extends AbstractPayment
	pyament(){
		crypto wallet proces
	}